name: linux-precompile

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  armv7l-linux-gnueabihf:
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    env:
      ImageOS: ubuntu20
      LANG: en_US.UTF-8
      LANGUAGE: en_US:en
      LC_ALL: en_US.UTF-8
      DEBIAN_FRONTEND: noninteractive
      ARCH: armv7l
      TARGET: armv7l-linux-gnueabihf
    strategy:
      matrix:
        job:
          - {otp: "27.1.1", elixir: "1.17"}
          - {otp: "25.3.2.14", elixir: "1.16"}

    name: Linux armv7l - OTP ${{ matrix.job.otp }} - Elixir ${{ matrix.job.elixir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependecies
        run: |
          alias sudo=`which sudo`
          $sudo apt-get update
          $sudo apt-get install -y \
            build-essential automake autoconf pkg-config wget curl \
            bc m4 unzip zip gcc g++ ca-certificates libssl-dev

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.job.otp }}
          elixir-version: ${{ matrix.job.elixir }}

      - name: Install armv7l specific deps
        run: |
          alias sudo=`which sudo`
          $sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Create precompiled ${{ env.ARCH }} library
        run: |
          ROOTDIR="$(pwd)"
          OTP_ROOTDIR="${ROOTDIR}/.tools/otp"
          mkdir -p "${OTP_ROOTDIR}"
          cd "${OTP_ROOTDIR}"
          curl -fSL "https://github.com/cocoa-xu/otp-build/releases/download/v${{ matrix.job.otp }}/otp-${{ env.TARGET }}.tar.gz" -o "otp-${{ env.TARGET }}.tar.gz"
          tar -xzf "otp-${{ env.TARGET }}.tar.gz"
          cd "${ROOTDIR}"

          export PRECOMPILE_ERL_EI_INCLUDE_DIR="${OTP_ROOTDIR}/usr/local/lib/erlang/usr/include"
          export ELIXIR_MAKE_CACHE_DIR=$(pwd)/cache
          mkdir -p "${ELIXIR_MAKE_CACHE_DIR}"
          mix deps.get
          mix elixir_make.precompile

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            cache/*${{ env.TARGET }}*.tar.gz

  precompile:
    runs-on: ubuntu-latest
    container: ubuntu:20.04
    env:
      ImageOS: ubuntu20
      LANG: en_US.UTF-8
      LANGUAGE: en_US:en
      LC_ALL: en_US.UTF-8
      DEBIAN_FRONTEND: noninteractive
      MIX_ENV: prod
    strategy:
      matrix:
        arch:
          - x86_64
          - aarch64
          - riscv64
        job:
          - {otp: "27", elixir: "1.17"}
          - {otp: "25", elixir: "1.16"}

    name: Linux ${{ matrix.arch }} - OTP ${{ matrix.job.otp }} - Elixir ${{ matrix.job.elixir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependecies
        run: |
          alias sudo=`which sudo`
          $sudo apt-get update
          $sudo apt-get install -y \
            build-essential automake autoconf pkg-config wget curl \
            bc m4 unzip zip gcc g++ ca-certificates libssl-dev

      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.job.otp }}
          elixir-version: ${{ matrix.job.elixir }}

      - name: Install x86_64 specific deps
        if: matrix.arch == 'x86_64'
        run: |
          alias sudo=`which sudo`
          $sudo apt-get install -y gcc-i686-linux-gnu g++-i686-linux-gnu \
            gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu \
            gcc-s390x-linux-gnu g++-s390x-linux-gnu

      - name: Install aarch64 specific deps
        if: matrix.arch == 'aarch64'
        run: |
          alias sudo=`which sudo`
          $sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install riscv64 specific deps
        if: matrix.arch == 'riscv64'
        run: |
          alias sudo=`which sudo`
          $sudo apt-get install -y gcc-riscv64-linux-gnu g++-riscv64-linux-gnu

      - name: Get musl ${{ matrix.arch }} cross-compilers
        run: |
          wget "https://musl.cc/${{matrix.arch}}-linux-musl-cross.tgz" -O "${{matrix.arch}}-linux-musl-cross.tgz"
          tar -xf "${{matrix.arch}}-linux-musl-cross.tgz"

      - name: Create precompiled ${{ matrix.arch }} library
        run: |
          export PATH="$(pwd)/${{ matrix.arch }}-linux-musl-cross/bin:${PATH}"
          export ELIXIR_MAKE_CACHE_DIR=$(pwd)/cache
          mkdir -p "${ELIXIR_MAKE_CACHE_DIR}"
          mix deps.get
          mix elixir_make.precompile

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.arch == 'x86_64'
        with:
          files: |
            cache/*.tar.gz
      
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.arch != 'x86_64'
        with:
          files: |
            cache/*${{ matrix.arch }}*.tar.gz
